import { db } from "../../../firebase";
import {
  collection,
  query,
  getDocs,
  Timestamp,
  FirestoreDataConverter,
  QueryDocumentSnapshot,
  SnapshotOptions,
  DocumentData,
  addDoc,
  serverTimestamp,
  doc,
  updateDoc,
  deleteDoc,
  orderBy,
  WithFieldValue,
  FieldValue,
  getDoc,
} from "firebase/firestore";
import { BookingTypes } from "@/interfaces/bookingTypes";

// BookingTypes Firestore converter
const bookingTypesConverter: FirestoreDataConverter<BookingTypes> = {
  toFirestore(bookingType: BookingTypes): DocumentData {
    // Since id is generated by Firestore, we omit it in the conversion to Firestore
    const { docId, ...data } = bookingType;
    return {
      ...data,
      created_at: bookingType.created_at || serverTimestamp(),
      updated_at: serverTimestamp(),
    };
  },
  fromFirestore(
    snapshot: QueryDocumentSnapshot<DocumentData>,
    options: SnapshotOptions
  ): BookingTypes {
    const data = snapshot.data(options);
    return {
      docId: snapshot.id,
      name: data.name || "No name", // Provide a fallback for missing fields
      duration: data.duration || 0,
      fee: data.fee || 0,
      color: data.color || "#000000",
      created_at: data.created_at,
      updated_at: data.updated_at,
    };
  },
};

// Reference to the user's booking types collection
const bookingTypesRef = (uid: string) =>
  collection(db, `users/${uid}/bookingTypes`).withConverter(
    bookingTypesConverter
  );

// Function to fetch booking types
export async function fetchBookingTypes(user: string): Promise<BookingTypes[]> {
  const q = query(bookingTypesRef(user), orderBy("created_at", "desc"));
  const querySnapshot = await getDocs(q);
  return querySnapshot.docs.map((doc) => doc.data()); // Automatically maps to BookingTypes
}

// fetch a single booking type
export async function fetchBookingType(
  uid: string,
  id: string
): Promise<BookingTypes | undefined> {
  const bookingTypeRef = doc(bookingTypesRef(uid), id);
  const bookingTypeSnapshot = await getDoc(bookingTypeRef);
  if (bookingTypeSnapshot.exists()) {
    return bookingTypeSnapshot.data();
  }
}

// Function to add a booking type to Firestore
export async function addBookingType(
  uid: string,
  bookingType: Omit<BookingTypes, "docId"> // Exclude docId from the input type
): Promise<void> {
  const newBookingType = {
    ...bookingType,
    created_at: serverTimestamp(),
    updated_at: serverTimestamp(),
  };
  await addDoc(bookingTypesRef(uid), newBookingType);
}

// Function to update a booking type in Firestore
export async function updateBookingType(
  uid: string,
  bookingType: BookingTypes
): Promise<void> {
  const bookingTypeRef = doc(bookingTypesRef(uid), bookingType.docId);
  const updatedBookingType = {
    ...bookingType,
    updated_at: serverTimestamp(),
  };
  await updateDoc(bookingTypeRef, updatedBookingType);
}

// Function to delete a booking type from Firestore
export async function deleteBookingType(
  uid: string,
  id: string
): Promise<void> {
  const bookingTypeRef = doc(bookingTypesRef(uid), id);
  await deleteDoc(bookingTypeRef);
}
